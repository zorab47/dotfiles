#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "${BASH_SOURCE[0]}")"
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] %s" "$1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] %s " "$1"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] %s\n" "$1"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f "${HOME}/.gitconfig" ]
  then
    local git_authorname=$1 git_authoremail=$2
    info 'setup gitconfig'

    if [ -z "$git_authorname" ]; then
      user ' - What is your github author name?'
      read -e git_authorname
    fi

    if [ -z "$git_authoremail" ]; then
      user ' - What is your github author email?'
      read -e git_authoremail
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g"      \
        -e "s/AUTHOREMAIL/$git_authoremail/g"    \
        gitconfig.example > "${HOME}/.gitconfig"

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite='' backup='' skip=''
  local action=''

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink "$dst")"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked  $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 1 | grep --invert-match --file="symlink.exclusions")
  do
    dst="$HOME/.$(basename "${src}")"
    link_file "$src" "$dst"
  done
}

install_config_dirs () {
  local overwrite_all=false backup_all=false skip_all=false

  link_file "$DOTFILES_ROOT/fish" "$HOME/.config/fish"
  link_file "$DOTFILES_ROOT/dunst" "$HOME/.config/dunst"
}

setup_gitconfig "$1" "$2"
install_dotfiles
install_config_dirs


echo ''
echo '  All installed!'
